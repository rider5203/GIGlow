namespace = GIGlow

[Constants]
global $time = 0.0
global $type = 0.0
global $enabled = 0
global $speed = 0.0
global $bright = 0.0
global $glow = 0.0
global $bloom = 0.0

[CommandListRun]
x180 = $time
y180 = $type
z180 = $enabled
w180 = $speed
x181 = $bright
y181 = $glow
z181 = $bloom

[CommandListClear]
$time = 0.0
$type = 0.0
$enabled = 0
$speed = 0.0
$bright = 0.0
$glow = 0.0
$bloom = 0.0
ps-t80 = null

; Diffuse ----------------------------------------------

[ShaderRegexDiffuseTransparency]
shader_model = ps_4_0 ps_5_0
temps = set tex80 dim glow control temp temp1
post run = CommandListClear



;Cute regex to match (almost) every character diffuse shader and outline
[ShaderRegexDiffuseTransparency.Pattern]
(?s)(?<MatchDiffuse>
dcl_output o0\.xyzw\n
dcl_output o1\.xyzw\n
dcl_output o2\.xyzw\n
dcl_output o3\.x\n
dcl_output o4\.x\n
dcl_output o5\.x\n
.*)
(?P<ModestyB>^\s*if_nz -?r\d+\.\w+\n
^\s+div -?r\d+\.\w+, v?\d+\.\w+, v?\d+\.\w+\n
^\s+mul -?r\d+\.\w+, -?r\d+\.\w+, -?cb\d\[\d+\]\.\w+\n
^\s+mul -?r\d+\.\w+, -?r\d+\.\w+, l\(-?\d*\.?\d+, -?\d*\.?\d+, -?\d*\.?\d+, -?\d*\.?\d+\)\n
^\s+ge -?r\d+\.\w+, -?r\d+\.\w+, -?r\d+\.\w+\n
^\s+frc -?r\d+\.\w+, \|-?r\d+\.\w+\|\n
^\s+movc -?r\d+\.\w+, -?r\d+\.\w+, -?r\d+\.\w+, -?r\d+\.\w+\n
^\s+mul -?r\d+\.\w+, -?r\d+\.\w+, l\(-?\d*\.?\d+, -?\d*\.?\d+, -?\d*\.?\d+, -?\d*\.?\d+\)\n
^\s+ftou -?r\d+\.\w+, -?r\d+\.\w+\n
^\s+dp\d+\ -?r\d+\.\w+, -?cb\d\[\d+\]\.\w+, icb\[r\d+\.\w+ \+.?\d+\]\.\w+\n
^\s+dp\d+\ -?r\d+\.\w+, -?cb\d\[\d+\]\.\w+, icb\[r\d+\.\w+ \+.?\d+\]\.\w+\n
^\s+dp\d+\ -?r\d+\.\w+, -?cb\d\[\d+\]\.\w+, icb\[r\d+\.\w+ \+.?\d+\]\.\w+\n
^\s+dp\d+\ -?r\d+\.\w+, -?cb\d\[\d+\]\.\w+, icb\[r\d+\.\w+ \+.?\d+\]\.\w+\n
^\s+dp\d+\ r\d+\.\w+, -?r\d+\.\w+, icb\[r\d+\.\w+ \+.?\d+\]\.\w+\n
^\s+mad -?r\d+\.\w+, -?(cb\d\[\d+\]|r\d+)\.\w+, l\(-?\d*\.?\d+\), -?r\d+\.\w+\n
^\s+add -?r\d+\.\w+, -?r\d+\.\w+, l\(-?\d*\.?\d+\)\n
^\s+lt -?r\d+\.\w+, -?r\d+\.\w+, l\(-?\d*\.?\d+\)\n.*)
(?P<TillTexcord>sample_b_indexable\(texture2d\)\(float,float,float,float\) (?P<Register>r\d+)\.xyzw, (?P<TexcoordX>v(2|1[01])\.xyxx), t[01]\.xyzw, s1, r0.y)
(?P<middle_content>[\s\S]*?)
(?P<Tillo1>.*mov o1\.(?<o1var>[xyzw]{4}, r\d\.[xyzw]+))
(?P<Tillo2>.*mov o2\.(?<o2var>[xyzw]+, r\d\.[xyzw]+))
(?P<TillBloom>.*mov o4.x, (?<Bloom>r\d+\.[xyzw]+))
(?P<TillRet>.*)
ret

[ShaderRegexDiffuseTransparency.InsertDeclarations]
dcl_resource_texture1d (float,float,float,float) t120
dcl_resource_texture2d (float,float,float,float) t80
dcl_sampler s15, mode_default

;Inserts a discard statement if any pixel from our ps-t80 texture is not OPAQUE
[ShaderRegexDiffuseTransparency.Pattern.Replace]
${MatchDiffuse}\n
${ModestyB}\n
${TillTexcord}\n
ld_indexable(texture1d)(float,float,float,float) ${set}.xyzw, l(180,0), t120.xyzw\n
if_nz ${set}.z\n
    resinfo_indexable(texture2d)(float,float,float,float) ${dim}.xyyy, l(0), t80.xyzw\n
	if_nz ${dim}.xy\n
        sample_aoffimmi_indexable(1,1,1)(texture2d)(float,float,float,float) ${tex80}.xyzw, ${TexcoordX}, t80.xyzw, s15\n
        lt ${control}.x, l(0.1), ${tex80}.w\n
        if_nz ${control}.x\n
            ld_indexable(texture1d)(float,float,float,float) ${glow}.xyzw, l(181,0), t120.xyzw\n

            ; if (TYPE 0)
            if_z ${set}.y\n
                mov ${Register}.xyz, ${tex80}.xyz\n
                add ${control}.y, ${glow}.x, l(1.0)\n
                if_nz ${control}.y\n
                    mov ${Register}.w, ${glow}.x\n
                endif\n
            endif\n

            ; if (TYPE 1)
            add ${control}.z, ${set}.y, -l(1.0)\n
            if_z ${control}.z\n
                mul ${temp}.w, ${set}.x, ${set}.w\n
                sincos ${temp}.w, null, ${temp}.w\n
                add ${temp}.w, ${temp}.w, l(1.0)\n
                mul ${temp}.w, ${temp}.w, l(0.5)\n

                add ${temp}.x, ${tex80}.x -${Register}.x\n
                add ${temp}.y, ${tex80}.y -${Register}.y\n
                add ${temp}.z, ${tex80}.z -${Register}.z\n
                
                mad ${Register}.x, ${temp}.x, ${temp}.w, ${Register}.x\n
                mad ${Register}.y, ${temp}.y, ${temp}.w, ${Register}.y\n
                mad ${Register}.z, ${temp}.z, ${temp}.w, ${Register}.z\n

                add ${control}.y, ${glow}.x, l(1.0)\n
                if_nz ${control}.y\n
                    add ${temp1}.w, ${glow}.x -${Register}.w\n
                    mad ${Register}.w, ${temp1}.w, ${temp}.w, ${Register}.w\n
                endif\n
            endif\n

            ; if (TYPE 2)
            add ${control}.z, ${set}.y, -l(2.0)\n
            if_z ${control}.z\n
                mul ${temp}.w, ${set}.x, ${set}.w\n
                div ${temp}.w, ${temp}.w, l(2.0)\n
                frc ${temp}.w, ${temp}.w\n
                mul ${temp}.w, ${temp}.w, l(2.0)\n
                add ${temp}.w, -${temp}.w, l(1.0)\n


                lt ${temp}.z, ${temp}.w, ${tex80}.w\n
                if_nz ${temp}.z\n
                    mov ${Register}.xyz, ${tex80}.xyz\n
                    add ${control}.y, ${glow}.x, l(1.0)\n
                    if_nz ${control}.y\n
                        mov ${Register}.w, ${glow}.x\n
                    endif\n
                endif\n
            endif\n

            ; if (TYPE 3)
            add ${control}.z, ${set}.y, -l(3.0)\n
            if_z ${control}.z\n
                mul ${temp}.x, ${set}.x, ${set}.w\n
                add ${temp}.y, ${temp}.x, l(2.0)\n
                add ${temp}.z, ${temp}.x, l(4.0)\n
                
                sincos ${temp}.x, null, ${temp}.x\n
                sincos ${temp}.y, null, ${temp}.y\n
                sincos ${temp}.z, null, ${temp}.z\n
                
                add ${temp}.x, ${temp}.x, l(1.0)\n
                add ${temp}.y, ${temp}.y, l(1.0)\n
                add ${temp}.z, ${temp}.z, l(1.0)\n
                
                mul ${Register}.x, ${temp}.x, l(0.5)\n
                mul ${Register}.y, ${temp}.y, l(0.5)\n
                mul ${Register}.z, ${temp}.z, l(0.5)\n

                add ${control}.y, ${glow}.x, l(1.0)\n
                if_nz ${control}.y\n
                    mov ${Register}.w, ${glow}.x\n
                endif\n
            endif\n
            ; min ${Register}.x, ${Register}.x, l(1.0)\n
            ; max ${Register}.x, ${Register}.x, l(0.0)\n
            ; min ${Register}.y, ${Register}.y, l(1.0)\n
            ; max ${Register}.y, ${Register}.y, l(0.0)\n
            ; min ${Register}.z, ${Register}.z, l(1.0)\n
            ; max ${Register}.z, ${Register}.z, l(0.0)\n
            ; min ${Register}.w, ${Register}.w, l(1.0)\n
            ; max ${Register}.w, ${Register}.w, l(0.0)\n
        endif\n
    endif\n
endif\n
${middle_content}\n
${Tillo1}\n
${Tillo2}\n
${TillBloom}\n
${TillRet}\n
if_nz ${set}.z\n
	if_nz ${dim}.xy\n
        lt ${control}.x, l(0.1), ${tex80}.w\n
        if_nz ${control}.x\n
            add ${control}.w, ${glow}.y, l(1.0)\n
            if_nz ${control}.w\n
                mov o1.w, ${glow}.y\n
                ; min o1.w, o1.w, l(1.0)\n
                ; max o1.w, o1.w, l(0.0)\n
            endif\n
            add ${control}.w, ${glow}.z, l(1.0)\n
            if_nz ${control}.w\n
                mov o4.x, ${glow}.z\n
                ; min o4.x, o4.x, l(1.0)\n
                ; max o4.x, o4.x, l(0.0)\n
            endif\n
        endif\n
    endif\n
endif\n
;discard_z l(0)\n
ret